import {getLookups} from '../masterfiles';
import {MultiObserver} from 'multi-observer'; 
import {inject, ObserverLocator,bindable} from 'aurelia-framework';
import {getFilter} from '../helpers';
import _ from 'underscore';
import $ from 'jquery';
//import {Dispatcher, handle} from 'aurelia-flux';  
import {EntityManager, EntityQuery} from '../entity-manager-factory';
import toastr from "toastr";
import {objBudget} from 'objBudget';

@inject(MultiObserver,ObserverLocator,Element, objBudget)
export class budget {
	items = [];
	observerLocator = null;
	pageindex=0;
	varFilterArrayLength=0;
	varFilterArray = [];
	//_dispatcher;
	currPredicate=null;
	//intTest=0;
	constructor(multiObserver,observerLocator,Element, objBudget) {

		//this._dispatcher=Dispatcher;
		
		this.observerLocator=observerLocator;
		
		this.items=getLookups().BDGT_TMPL_HDR;

		this._objBudget=objBudget;
	
		multiObserver.observe(
			[
				[this, '_bPROGRAM_CD'],
				[this, '_bPROGRAM_TITLE']
			], (newValue, oldValue) => this.onSpeculateProp(newValue, oldValue));

		// multiObserver.observe(
		// 	[
		// 		[this._objBudget.CALLER, 'ACTION'],
		// 		[this._objBudget.CALLER, 'ACTION_CALLER']
		// 	], (newValue, oldValue) => {

		// 		if (this._objBudget.CALLER.ACTION == '')
		// 			return;
		// 		else if (this._objBudget.CALLER.ACTION == 'clear.program.modal') {
		// 			this.ClearSearch();
		// 		} else {
		// 			return;
		// 		}

		// 	});


		this._objBudget.OBSERVERS.clear_program_modal.push(() => {
			this.ClearSearch();
		});

	}

	selectedTalent(item){
		
		// this._objBudget.CALLER.VALUE1 = item;
		// this._objBudget.CALLER.ACTION="pass.value";

		this._objBudget.OBSERVERS.pass_value.forEach((all) => {
			all(item);
		});

		//this._dispatcher.dispatch('pass.value', item);
	}

	onSpeculateProp(newValue, oldValue) {
		
		
		var varValuesHasChanged=false;
		//check if inputs has value else return;
		_.each(this._rBUDGET_TITLE.querySelectorAll('input'), all => {
				var varOb = this.observerLocator.getObserver(this, all.getAttribute('searchable').replace('_s', '_b'));

				if(varOb.getValue()!='' && varOb.getValue()!==undefined)
				{	
					varValuesHasChanged=true;
				}
		});
		

		if(!varValuesHasChanged) return;
		//++this.intTest;
		var tmpVar = [];
		if(this.varFilterArray.length>0)
			tmpVar=this.varFilterArray;

		var lstPredicates=[];
		_.each(this._rBUDGET_TITLE.querySelectorAll('input'), all => {

			var varOb = this.observerLocator.getObserver(this, all.getAttribute('searchable').replace('_s', '_b'));
			
			if(varOb.getValue()!=undefined && varOb.getValue()!=null && varOb.getValue()!="" && varOb.getValue()!="undefined")
			// if(varOb.propertyName.indexOf("PROGRAM_CD")>-1)
			// {
			// 	lstPredicates.push(breeze.Predicate.create(varOb.propertyName.replace('_b', ''), "==", varOb.getValue().toUpperCase()));
			// }
			// else
			// {
				lstPredicates.push(breeze.Predicate.create(varOb.propertyName.replace('_b', ''), breeze.FilterQueryOp.Contains, varOb.getValue().toUpperCase()));
			//}
			
			if(tmpVar.length>0)
			{
				tmpVar = getFilter(tmpVar, varOb.getValue(), all.getAttribute('searchable').replace('_s', ''));
			}
				

		});

		this.currPredicate=lstPredicates;


		//if has existing results, use it, else, query to server
		if(tmpVar.length>0) 
		{
 			this.varFilterArray = tmpVar;
			this.varFilterArrayLength=this.varFilterArray.length;
			return;
		}

		//delay to get minimize bloated multiple/simultaneous searching
		setTimeout((a) => {

			if (a !== this.currPredicate)
				return;

			this.varFilterArray = [];

			var _query = EntityQuery().from('PROGRAM_MSTR').where(breeze.Predicate.and(this.currPredicate)).select('PROGRAM_CD,PROGRAM_TITLE,PROGRAM_ID');
			EntityManager().executeQuery(_query).then((success) => {
				tmpVar = [];

				_.each(success.results, (all) => {
					tmpVar.push({
						PROGRAM_TITLE: all.PROGRAM_TITLE,
						PROGRAM_CD: all.PROGRAM_CD,
						PROGRAM_ID: all.PROGRAM_ID,
					});
				});

				//if (tmpVar.length < this.varFilterArray.length || this.varFilterArray.length == 0) { //console.log(tmpVar);
					this.varFilterArray = tmpVar;
					this.varFilterArrayLength = this.varFilterArray.length;
				//}

			}, (failed) => {
				toastr.error(failed, "Failed loading PROGRAM Names");
			});

		}, 500, this.currPredicate);

	}

	selectedProgram(item){

		// this._objBudget.CALLER.VALUE1 = item;
		// this._objBudget.CALLER.ACTION="pass.program";

		this._objBudget.OBSERVERS.pass_program.forEach((all) => {
			all(item);
		});

		//this._dispatcher.dispatch('pass.program', item);
	}

	//@handle('clear.program.modal')
	ClearSearch(){
		this._bPROGRAM_CD="";
		this._bPROGRAM_TITLE="";
		this.varFilterArray = [];
		this.varFilterArrayLength = 0;
	}
}
