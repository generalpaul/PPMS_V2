import {getLookups} from '../masterfiles';
import {MultiObserver} from 'multi-observer'; 
import {inject, ObserverLocator,bindable} from 'aurelia-framework';
import {getFilter} from '../helpers';
import _ from 'underscore';
import $ from 'jquery';
//import {Dispatcher, handle} from 'aurelia-flux';  
import {EntityManager, EntityQuery} from '../entity-manager-factory';
import toastr from "toastr";
import {objBudget} from 'objBudget';

@inject(MultiObserver,ObserverLocator,Element, objBudget)
export class budget {
	items = [];
	observerLocator = null;
	pageindex=0;
	varFilterArrayLength=0;
	varFilterArray = [];
	//_dispatcher;
	currPredicate=null;
	intTest=0;
	hasFocus=true;
	constructor(multiObserver,observerLocator,Element, objBudget) {

		//this._dispatcher=Dispatcher;
		
		this.observerLocator=observerLocator;
		
		this.items=getLookups().BDGT_TMPL_HDR;

		this._objBudget=objBudget;
	
		multiObserver.observe(
			[
				[this, '_bJOB_GRP'],
				[this, '_bJOB_DESC']
			], (newValue, oldValue) => this.onSpeculateProp(newValue, oldValue));


		// multiObserver.observe(
		// 	[
		// 		[this._objBudget.CALLER, 'ACTION'],[this._objBudget.CALLER, 'ACTION_CALLER']
		// 	], (newValue, oldValue) => {

		// 	    if(this._objBudget.CALLER.ACTION=='')
  //           		  return;
		// 		else if(this._objBudget.CALLER.ACTION=='clear.program.modal')
		// 		{
		// 			this.ClearSearch();	
		// 		}
		// 		else
		// 		{
		// 			return;
		// 		}
		// 	});


		this._objBudget.OBSERVERS.clear_job_modal.push(() => {
			this.ClearSearch();
		});
		
		
	}

	selectedTalent(item){
		
		// this._objBudget.CALLER.VALUE1=item;
		// this._objBudget.CALLER.ACTION='pass.value';

		this._objBudget.OBSERVERS.pass_job.forEach((all)=>{
			all(item);
		});

		//this._dispatcher.dispatch('pass.value', item);
	}

	fnManualFilter(tmpVar)
	{
		this.currPredicate = [];
		_.each(this._rJOB_TITLE.querySelectorAll('input'), all => {

			var varOb = this.observerLocator.getObserver(this, all.getAttribute('searchable').replace('_s', '_b'));

			if (varOb.getValue() != undefined && varOb.getValue() != null && varOb.getValue() != "" && varOb.getValue() != "undefined")
			// if(varOb.propertyName.indexOf("JOB_GRP")>-1)
			// {
			// 	lstPredicates.push(breeze.Predicate.create(varOb.propertyName.replace('_b', ''), "==", varOb.getValue().toUpperCase()));
			// }
			// else
			// {
				this.currPredicate.push(breeze.Predicate.create(varOb.propertyName.replace('_b', ''), breeze.FilterQueryOp.Contains, varOb.getValue().toUpperCase()));
			//}

			if (tmpVar.length > 0)
				tmpVar = getFilter(tmpVar, varOb.getValue(), all.getAttribute('searchable').replace('_s', ''));

		});

		return tmpVar;
	}

	onSpeculateProp(newValue, oldValue) {
		
	
		var varValuesHasChanged=false;
		//check if inputs has value else return;
		_.each(this._rJOB_TITLE.querySelectorAll('input'), all => {
				var varOb = this.observerLocator.getObserver(this, all.getAttribute('searchable').replace('_s', '_b'));

				if(varOb.getValue()!='' && varOb.getValue()!==undefined)
				{	
					varValuesHasChanged=true;
				}
		});


		if(!varValuesHasChanged) return;

		var tmpVar = this.fnManualFilter(this.varFilterArray);

		//if has existing results, use it, else, query to server
		if(tmpVar.length>0) 
		{
			var tmpVarNew=_.sortBy(tmpVar, 'BDGT_TMPL_ID').reverse();
 			this.varFilterArray = tmpVarNew;
			this.varFilterArrayLength=this.varFilterArray.length;
			return;
		}

		
		//this.currPredicate=lstPredicates;


		//if has existing results, use it, else, query to server
		if(tmpVar.length>0) 
		{
			var tmpVarNew=_.sortBy(tmpVar, 'JOB_DESC').reverse();
 			this.varFilterArray = tmpVarNew;
			this.varFilterArrayLength=this.varFilterArray.length;
			return;
		}

		//delay to get minimize bloated multiple/simultaneous searching
		setTimeout((a) => {

			if (a !== this.currPredicate)
				return;

			 //console.log(this._objBudget.USER.COMPANY_ID);
			 var varJobs = getLookups().JOB_GRP_CATEGORY.filter
    		 ((all)=>all.COMPANY_ID==this._objBudget.USER.COMPANY_ID);

    		 //varJobs.find()

			this.varFilterArray = [];

			 	_.each(varJobs, (all) => {
			 		if(all.JOB_DESC.indexOf("[SELECT")==-1)
					tmpVar.push({
						JOB_DESC: all.JOB_DESC,
						JOB_GRP: all.CATEGORY_DESC,
						JOB_ID: all.JOB_ID
					});
				});

			 	tmpVar=this.fnManualFilter(tmpVar); 

				//if (tmpVar.length < this.varFilterArray.length || this.varFilterArray.length == 0) { 
					this.varFilterArray = tmpVar;
					this.varFilterArrayLength = this.varFilterArray.length;
				//}

			// var _query = EntityQuery().from('JOB_MSTR').where(breeze.Predicate.and(this.currPredicate)).select('JOB_GRP,JOB_DESC,PROGRAM_ID');
			// EntityManager().executeQuery(_query).then((success) => {
			// 	tmpVar = [];

			// 	_.each(success.results, (all) => {
			// 		tmpVar.push({
			// 			JOB_DESC: all.JOB_DESC,
			// 			JOB_GRP: all.JOB_GRP,
			// 			PROGRAM_ID: all.PROGRAM_ID,
			// 		});
			// 	});

			// 	if (tmpVar.length < this.varFilterArray.length || this.varFilterArray.length == 0) { //console.log(tmpVar);
			// 		this.varFilterArray = tmpVar;
			// 		this.varFilterArrayLength = this.varFilterArray.length;
			// 	}

			// }, (failed) => {
			// 	toastr.error(failed, "Failed loading JOB Descriptions");
			// });

		}, 500, this.currPredicate);

	}

	selectedJob(item){
		// this._objBudget.CALLER.VALUE1=item;
		// this._objBudget.CALLER.ACTION='pass.job';


		this._objBudget.OBSERVERS.pass_job.forEach((all)=>{
			all(item);
		});

		//this._dispatcher.dispatch('pass.job', item);
	}

	//@handle('clear.program.modal')
	ClearSearch(){
		this._bJOB_GRP="";
		this._bJOB_DESC="";
		this.varFilterArray = [];
		this.varFilterArrayLength = 0;
		
		//console.log("test");
		setTimeout(() => {
			$(this.refJobDesc).focus();
		}, 500);
	}


	fnKeyup(evt,item){
		if(evt.keyCode==13){
			if(this.varFilterArray.length==1)
			{

				this._objBudget.OBSERVERS.pass_job.forEach((all)=>{
					all(this.varFilterArray[0]);
				});
				
			}
		}
	}
}
