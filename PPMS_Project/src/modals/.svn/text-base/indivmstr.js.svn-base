import {getLookups} from '../masterfiles';
import {MultiObserver} from 'multi-observer'; 
import {inject, ObserverLocator,bindable} from 'aurelia-framework';
import {getFilter} from '../helpers';
import _ from 'underscore';
import $ from 'jquery';
//import {Dispatcher, handle} from 'aurelia-flux';  
import {EntityManager, EntityQuery} from '../entity-manager-factory';
import toastr from "toastr";
import {ModalWizard} from 'modals/modal-wizard';
import {objBudget} from 'objBudget';

@inject(MultiObserver, ObserverLocator, Element, ModalWizard,objBudget)
export class indivmstr {
	items = [];
	observerLocator = null;
	pageindex=0;
	varFilterArray = [];
	varFilterArrayLength=0;
	//currPredicate = null;
	//_dispatcher;
	_ModalWizard;
	_objBudget;
	constructor(multiObserver, observerLocator, Element, ModalWizard,objBudget) {
		this._objBudget=objBudget;
		this._ModalWizard=ModalWizard;
		toastr.info("Personnel Data...", "Loading..");

		toastr.success("Start Search...", "Loading Finish..");

		//this._dispatcher = Dispatcher;

		this.observerLocator = observerLocator;
		
		//this.items = getLookups().GLOBAL_GRP_MSTR;
		multiObserver.observe(
			[
				[this, '_bGLOBAL_INDIV_ID'],
				[this, '_bPERSONNEL_NAME']
			], (newValue, oldValue) => this.onSpeculateProp(newValue, oldValue));
   
		// multiObserver.observe(
		// 	[
		// 		[this._objBudget.CALLER, 'ACTION'],[this._objBudget.CALLER, 'ACTION_CALLER']
		// 	], (newValue, oldValue) => {

		// 		if (this._objBudget.CALLER.ACTION == '')
		// 			return;
		// 		else if (this._objBudget.CALLER.ACTION == 'clear.indiv.modal') {
		// 			this.ClearSearch();
		// 		}
		// 		else
		// 		{
		// 			return;
		// 		}
		// 	});

		this._objBudget.OBSERVERS.clear_indiv_modal.push(() => {
			this.ClearSearch();
		});
	}

	
	selectedIndiv(item) {
		// this._objBudget.CALLER.VALUE1=item;
		// this._objBudget.CALLER.ACTION='pass.indiv';

		this._objBudget.OBSERVERS.pass_indiv.forEach((all) => {
			all(item);
		});

		//this._objBudget.CALLER.ACTION_CALLER='indivmstr';
		
		//this._dispatcher.dispatch('pass.indiv', item);
	}

	fnManualFilter(tmpVar)
	{
		var lstPredicates=[];
		_.each(this._rGROUP_TITLE.querySelectorAll('input'), all => {

			var varOb = this.observerLocator.getObserver(this, all.getAttribute('searchable').replace('_s', '_b'));
			
			if(varOb.getValue()!=undefined && varOb.getValue()!=null && varOb.getValue()!="" && varOb.getValue()!="undefined"){
				
				if(varOb.propertyName.indexOf("PERSONNEL_NAME")>-1)
				{
					//varOb.propertyName="concat(concat(concat(LAST_NAME,', '), GIVEN_NAME)), MIDDLE_NAME)";
					lstPredicates.push(breeze.Predicate.create("concat(concat(concat(LAST_NAME,', '), GIVEN_NAME), MIDDLE_NAME)", breeze.FilterQueryOp.Contains, varOb.getValue().toUpperCase()));
				}
				else
				{
					lstPredicates.push(breeze.Predicate.create(varOb.propertyName.replace('_b', ''), breeze.FilterQueryOp.Contains, varOb.getValue().toUpperCase()));
				}
			}
		
			tmpVar = getFilter(tmpVar, varOb.getValue(), all.getAttribute('searchable').replace('_s', ''));

		});


		return tmpVar;
	}

	onSpeculateProp(newValue, oldValue) {
		
		if(this._rGROUP_TITLE===undefined || this._rGROUP_TITLE===null) return;
		var tmpVar = this.fnManualFilter(this.varFilterArray);
		
		if(tmpVar.length>0) 
		{
			var tmpVarNew=_.sortBy(tmpVar, 'PERSONNEL_NAME').reverse();
 			this.varFilterArray = tmpVarNew;
			this.varFilterArrayLength=this.varFilterArray.length;
			return;
		}
		else
		{
			tmpVar=this.fnManualFilter(getLookups().GLOBAL_INDIV_WITH_ALIAS); 
		}
		
		this.varFilterArray = tmpVar;
		this.varFilterArrayLength = this.varFilterArray.length;


	}

	fnKeyup(evt,item){
		if(evt.keyCode==13){
			if(this.varFilterArray.length==1)
			{
				this.selectedIndiv(this.varFilterArray[0])
			}
		}
	}


	//@handle('clear.indiv.modal')
	ClearSearch(){
		this._bGLOBAL_INDIV_ID="";
		this._bPERSONNEL_NAME="";
		this.varFilterArray = [];
		this.varFilterArrayLength = 0;
	}

}